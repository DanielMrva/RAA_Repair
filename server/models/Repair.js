const { Schema, model } = require("mongoose");
const dateFormat = require("../utils/dateFormat")

// const repairSchema = new Schema({
//     accessories: [{
//         type: String,
//     }],
//     completionDate: {
//         type: Date,
//         get: (timestamp) => dateFormat(timestamp),
//     },
//     contact: {
//         type: String,
//     },
//     controlID: {
//         type: String,
//     },
//     cost: {
//         type: Number,
//     },
//     customerPO: {
//         type: String,
//     },
//     customerPoDate: {
//         type: Date,
//         get: (timestamp) => dateFormat(timestamp),
//     },
//     received: {
//         type: Date,
//         get: (timestamp) => dateFormat(timestamp),
//     },
//     techReceived: {
//         type: Date,
//         get: (timestamp) => dateFormat(timestamp),
//     },
//     techSent: {
//         type: Date,
//         get: (timestamp) => dateFormat(timestamp),
//     },
//     filed: {
//         type: Boolean,
//         default: false,
//     },
//     frequencyError: {
//         type: String,
//     },
//     invoiceNumber: {
//         type: String,
//     },
//     list: {
//         type: Number,
//     },
//     ourPO: {
//         type: String,
//     },
//     partsDesc: {
//         type: String,
//     },
//     poText: {
//         type: String,
//     },
//     powerOutput: {
//         type: String,
//     },
//     problemReported: {
//         type: String,
//     },
//     quantity: {
//         type: Number,
//     },
//     repDesc: {
//         type: String,
//     },
//     repHours: {
//         type: Number,
//     },
//     rxSensitivity: {
//         type: String,
//     },
//     salesOrderText: {
//         type: String,
//     },
//     tech: {
//         type: String,
//     },
//     techInvoice: {
//         type: String,
//     },
//     txDeviation: {
//         type: String,
//     },
//     workStatus: {
//         type: Boolean,
//     }
// });


const repairSchema = new Schema({
    dateReceived: {
        type: Date,
        default: Date.now,
        get: (timestamp) => dateFormat(timestamp),
        // Admin
    }, 
    endUserPO: {
        type: String,
        // Admin
    },
    raaPO: {
        type: String,
        // Admin
    },
    repairTag: {
        type: String,
        // Admin
        // autogenerated sequentially from prev entry +1
    },
    dateSentTech: {
        type: Date,
        default: Date.now,
        get: (timestamp) => dateFormat(timestamp),
        // Admin
    },
    dateRecTech: {
        type: Date,
        default: Date.now,
        get: (timestamp) => dateFormat(timestamp),
        // Tech
    },
    dateSentEU: {
        type: Date,
        default: Date.now,
        get: (timestamp) => dateFormat(timestamp),
        // Admin
    },
    techInvNum: {
        type: String,
        // Tech
    },
    raaInvNum: {
        type: String,
        // Admin
    },
    symptoms: [{
        type: String,
        // User
    }],
    testFreq: {
        type: String,
        // MHZ
        // Tech / Admin
    },
    incRxSens: {
        type: String,
        // uV
        // Tech / Admin
    },
    incFreqErr: {
        type: String,
        // Hz,
        // Tech / Admin

    },
    incMod: {
        type: String,
        // KHz
        // Tech / Admin

    },
    incPowerOut: {
        type: String,
        // Watts
        // Tech / Admin

    },
    outRxSens: {
        type: String,
        // uV
        // Tech / Admin

    },
    outFreqErr: {
        type: String,
        // Hz
        // Tech / Admin

    },
    outMod: {
        type: String,
        // KHz
        // Tech / Admin

    },
    outPowerOut: {
        type: String,
        // Watts
        // Tech / Admin

    },
    accessories: [{
        type: String,
        // User / Tech / Admin
    }],
    workPerformed: [{
        type: String,
        // Tech / Admin
    }],
    repHours: {
        type: Number,
        // Tech / Admin
    },
    partsUsed: [{
        type: String,
        // TODO: later pulled from parts table
        // Tech / Admin
    }],
    remarks: {
        type: String,
        // Tech / Admin
    }
    // PO Text: Radio Repair: Make, Model #, Serial, With: Accessories, RepairTag, Organization, Location
    // Sales Order Text: Service Labor to Repair: Make, Model #, Serial, RepairTag
    // TODO: Make a Virtual to generate lines 190 and 191?
});


const Repair = model("Repair", repairSchema);

module.exports = Repair;

